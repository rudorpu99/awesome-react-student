{"ast":null,"code":"import _classCallCheck from \"/Users/JYP/Desktop/react-study/awesome-react-student/4week/class/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/JYP/Desktop/react-study/awesome-react-student/4week/class/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/JYP/Desktop/react-study/awesome-react-student/4week/class/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/JYP/Desktop/react-study/awesome-react-student/4week/class/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/JYP/Desktop/react-study/awesome-react-student/4week/class/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/JYP/Desktop/react-study/awesome-react-student/4week/class/src/container/MainView.js\";\nimport React, { Component } from 'react';\nimport './MainView.css';\nimport ContentList from \"../component/contentList/ContentList.js\";\nimport FullContent from '../component/fullcontent/FullContent.js';\nimport { connect } from 'react-redux';\nimport { fetchContents as _fetchContents, changeFullContent } from \"../actions\";\n\nvar MainView =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MainView, _Component);\n\n  function MainView() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MainView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MainView)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleFullContentChange = function (content) {\n      _this.props.changeViewContent(content); //mapDispatchToProps에서 선언한 viewContent를 변환하는 액션\n\n    };\n\n    return _this;\n  }\n\n  _createClass(MainView, [{\n    key: \"componentDidMount\",\n    //컴포넌트 렌더링이 완료된 후 유튜브에서 데이터 불러옴\n    value: function componentDidMount() {\n      this.props.fetchContents(); //mapDispatchToProps에서 선언한 유튜브데이터를 불러오는 액션\n    } //컴포넌트 종료시 contents 초기화\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.removeContents(); //mapDispatchToProps에서 선언한 contents를 초기화하는 액션\n    } //메인화면에서 영상을 실행하는 플레이어를 제어하는 함수\n    //이 함수를 이용해서 영상을 변경 한다.\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"mainView\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, React.createElement(FullContent, {\n        content: this.props.currentViewContent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }), React.createElement(ContentList, {\n        contents: this.props.contents,\n        onClick: this.handleFullContentChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return MainView;\n}(Component); //store의 state를 컴포넌트의 props로 전달 시켜줌\n\n\nvar mapStateToProps = function mapStateToProps(state) {\n  //store는 state를 리듀서 단위로 가지고 있어서 각각의 리듀서를 불러와서\n  //컴포넌트에 props로 전달할 값들을 뽑아낸다.\n  var contentsByYoutube = state.contentsByYoutube,\n      selectedContent = state.selectedContent;\n  var isFetching = contentsByYoutube.isFetching,\n      lastUpdated = contentsByYoutube.lastUpdated,\n      contents = contentsByYoutube.items;\n  var currentViewContent = selectedContent.viewContent;\n  return {\n    isFetching: isFetching,\n    contents: contents,\n    lastUpdated: lastUpdated,\n    currentViewContent: currentViewContent\n  };\n}; //action을 미리 dispatch해서 컴포넌트의 props로 전달 해주는 함수\n\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    fetchContents: function fetchContents() {\n      return dispatch(_fetchContents());\n    },\n    changeViewContent: function changeViewContent(content) {\n      return dispatch(changeFullContent(content));\n    }\n  };\n}; //connect함수를 이용해 container component와 redux를 연결\n//connect함수는 컴포넌트의 props와 store의 데이터를 연결 시켜주는 함수를 리턴\n//mapStateToProps, MapDispatchToProps는 connect함수의 인자로 따로 선언해줘야 함\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainView);","map":{"version":3,"sources":["/Users/JYP/Desktop/react-study/awesome-react-student/4week/class/src/container/MainView.js"],"names":["React","Component","ContentList","FullContent","connect","fetchContents","changeFullContent","MainView","handleFullContentChange","content","props","changeViewContent","removeContents","currentViewContent","contents","mapStateToProps","state","contentsByYoutube","selectedContent","isFetching","lastUpdated","items","viewContent","mapDispatchToProps","dispatch"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,gBAAP;AACA,OAAOC,WAAP,MAAwB,yCAAxB;AACA,OAAOC,WAAP,MAAwB,yCAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,aAAa,IAAbA,cAAT,EAAwBC,iBAAxB,QAAiD,YAAjD;;IAEMC,Q;;;;;;;;;;;;;;;;;;UAaJC,uB,GAA0B,UAACC,OAAD,EAAa;AACrC,YAAKC,KAAL,CAAWC,iBAAX,CAA6BF,OAA7B,EADqC,CACA;;AACtC,K;;;;;;;AAdH;wCACsB;AAClB,WAAKC,KAAL,CAAWL,aAAX,GADkB,CACQ;AAC3B,K,CAEH;;;;2CACyB;AACrB,WAAKK,KAAL,CAAWE,cAAX,GADqB,CACM;AAC5B,K,CAEH;AACA;;;;6BAKW;AACP,aACE;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKI,oBAAC,WAAD;AAAa,QAAA,OAAO,EAAE,KAAKF,KAAL,CAAWG,kBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,EAUK,oBAAC,WAAD;AAAa,QAAA,QAAQ,EAAE,KAAKH,KAAL,CAAWI,QAAlC;AAA4C,QAAA,OAAO,EAAE,KAAKN,uBAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAVL,CADF;AAcD;;;;EAhCoBP,S,GAmCvB;;;AACA,IAAMc,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AACjC;AACA;AAFiC,MAGzBC,iBAHyB,GAGcD,KAHd,CAGzBC,iBAHyB;AAAA,MAGNC,eAHM,GAGcF,KAHd,CAGNE,eAHM;AAAA,MAK/BC,UAL+B,GAQ7BF,iBAR6B,CAK/BE,UAL+B;AAAA,MAM/BC,WAN+B,GAQ7BH,iBAR6B,CAM/BG,WAN+B;AAAA,MAOxBN,QAPwB,GAQ7BG,iBAR6B,CAO/BI,KAP+B;AAAA,MAWlBR,kBAXkB,GAY7BK,eAZ6B,CAW/BI,WAX+B;AAcjC,SAAO;AACLH,IAAAA,UAAU,EAAVA,UADK;AAELL,IAAAA,QAAQ,EAARA,QAFK;AAGLM,IAAAA,WAAW,EAAXA,WAHK;AAILP,IAAAA,kBAAkB,EAAlBA;AAJK,GAAP;AAMD,CApBD,C,CAsBA;;;AACA,IAAMU,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ;AAAA,SAAK;AACtCnB,IAAAA,aAAa,EAAE;AAAA,aAAMmB,QAAQ,CAACnB,cAAa,EAAd,CAAd;AAAA,KADuB;AAEtCM,IAAAA,iBAAiB,EAAE,2BAACF,OAAD;AAAA,aAAae,QAAQ,CAAClB,iBAAiB,CAACG,OAAD,CAAlB,CAArB;AAAA;AAFmB,GAAL;AAAA,CAAnC,C,CAMA;AACA;AACA;;;AACA,eAAeL,OAAO,CACpBW,eADoB,EAEpBQ,kBAFoB,CAAP,CAGbhB,QAHa,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport './MainView.css';\nimport ContentList from \"../component/contentList/ContentList.js\";\nimport FullContent from '../component/fullcontent/FullContent.js';\nimport { connect } from 'react-redux';\nimport { fetchContents, changeFullContent } from \"../actions\";\n\nclass MainView extends Component {\n//컴포넌트 렌더링이 완료된 후 유튜브에서 데이터 불러옴\n  componentDidMount() {\n    this.props.fetchContents()//mapDispatchToProps에서 선언한 유튜브데이터를 불러오는 액션\n  }\n\n//컴포넌트 종료시 contents 초기화\n  componentWillUnmount() {\n    this.props.removeContents()//mapDispatchToProps에서 선언한 contents를 초기화하는 액션\n  }\n\n//메인화면에서 영상을 실행하는 플레이어를 제어하는 함수\n//이 함수를 이용해서 영상을 변경 한다.\n  handleFullContentChange = (content) => {\n    this.props.changeViewContent(content)//mapDispatchToProps에서 선언한 viewContent를 변환하는 액션\n  }\n\n  render() {\n    return (\n      <div className=\"mainView\">\n          {/*\n            영상을 실행 시키는 컴포넌트 \n         redux로 부터 받은 currentViewContent를 props로 사용\n          */}\n          <FullContent content={this.props.currentViewContent}/>\n          {/*\n            실행할 영상 리스트를 출력하는 컴포넌트\n        redux로 부터 받은 contents를 props로 사용\n          */}\n           <ContentList contents={this.props.contents} onClick={this.handleFullContentChange} />\n      </div>\n    );\n  }\n}\n\n//store의 state를 컴포넌트의 props로 전달 시켜줌\nconst mapStateToProps = (state) => {\n  //store는 state를 리듀서 단위로 가지고 있어서 각각의 리듀서를 불러와서\n  //컴포넌트에 props로 전달할 값들을 뽑아낸다.\n  const { contentsByYoutube, selectedContent } = state\n  const {\n    isFetching,\n    lastUpdated,\n    items: contents,\n  } = contentsByYoutube\n\n  const { \n    viewContent: currentViewContent\n  } = selectedContent\n\n  return {\n    isFetching,\n    contents,\n    lastUpdated,\n    currentViewContent\n  }\n}\n\n//action을 미리 dispatch해서 컴포넌트의 props로 전달 해주는 함수\nconst mapDispatchToProps = dispatch => ({\n  fetchContents: () => dispatch(fetchContents()),\n  changeViewContent: (content) => dispatch(changeFullContent(content)),\n\n});\n\n//connect함수를 이용해 container component와 redux를 연결\n//connect함수는 컴포넌트의 props와 store의 데이터를 연결 시켜주는 함수를 리턴\n//mapStateToProps, MapDispatchToProps는 connect함수의 인자로 따로 선언해줘야 함\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MainView);\n"]},"metadata":{},"sourceType":"module"}